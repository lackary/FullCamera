package com.lacklab.app.fullcamera.util.cam.ability

import android.hardware.camera2.CameraCharacteristics
import android.os.Build
import androidx.annotation.RequiresApi


enum class CameraCapability(val capabilities: Int) {
    BACKWARD_COMPATIBLE(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE),
    MANUAL_SENSOR(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR),
    MANUAL_POST_PROCESSING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING),
    CAPABILITIES_RAW(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_RAW),
    PRIVATE_REPROCESSING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING),
    READ_SENSOR_SETTINGS(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS),
    BURST_CAPTURE(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE),
    YUV_REPROCESSING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING),
    DEPTH_OUTPUT(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT),
    CONSTRAINED_HIGH_SPEED_VIDEO(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO),
    MOTION_TRACKING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING),
    LOGICAL_MULTI_CAMERA(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA),
    MONOCHROME(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME),
    SECURE_IMAGE_DATA(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA),
    SYSTEM_CAMERA(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA),
    OFFLINE_PROCESSING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING),
    @RequiresApi(Build.VERSION_CODES.S)
    ULTRA_HIGH_RESOLUTION_SENSOR(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR),
    @RequiresApi(Build.VERSION_CODES.S)
    REMOSAIC_REPROCESSING(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING),
    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    DYNAMIC_RANGE_TEN_BIT(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT),
    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    STREAM_USE_CASE(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE),
    @RequiresApi(Build.VERSION_CODES.UPSIDE_DOWN_CAKE)
    COLOR_SPACE_PROFILES(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES);

    companion object {
        fun formInt(value: Int) = entries.firstOrNull { it.capabilities == value }
    }
}